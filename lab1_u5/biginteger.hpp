#ifndef _BIGINTEGER_HPP_
#define _BIGINTEGER_HPP_

#include <string>

// Реализуйте класс для работы с большими целыми числами BigInteger, которые не помещаются в обычные целочисленные типы данных, а хранятся в виде массивов. При этом младшие разряды размещаются в ячейке №0, следующие в ячейке №1 и т.д. 
//Для упрощения задачи, положим, что числа являются беззнаковыми.Рекомендуется предварительно ознакомиться с подобными алгоритмами в литературе и различніх Internet - публикациях.

class BigInteger
{
private:

	std::string data;

	std::string getStringBigIntegerWithoutZeros() const;
	bool IsCorrectIndex(int _index) const;

public:

	// Доступ к хранимой строке
	std::string getBigInteger() const;

	// Конструктор, принимающий максимальное число десятичных разрядов в числе.Все разряды изначально обнуляются.В случае передачи числа разрядов, 
	// не являющегося положительным, генерируется исключение std::logic_error с текстом “Invalid size”.
	BigInteger( int _size );

	// Конструктор, принимающий исходное число в виде строки в десятичной системе счисления.Число разрядов определяется автоматически. Если строка содержит 
	// недопустимые символы - должно генерироваться исключение std::logic_error  с текстом “Not a number”.
	BigInteger( std::string _number );

	// Конструктор копий. 
	// 
	
	// Деструктор.
	// 

	// Оператор присвоения.
	// 

	// Метод getNumDigits(), возвращающий разрядность(т.е., количество десятичных цифр) в хранимых числах.
	int getNumDigits() const { return this->data.size(); };

	// Перегруженные операторы сравнения : <. <= , >, >= , == , != .
	bool operator == (const BigInteger & _bi) const;
	bool operator != (const BigInteger & _bi) const;
	bool operator < (const BigInteger & _bi) const;
	bool operator <= (const BigInteger & _bi) const;
	bool operator > (const BigInteger & _bi) const;
	bool operator >= (const BigInteger & _bi) const;

	// Перегруженный оператор индексной выборки[] в двух вариантах - с правом только на чтение и с правом на запись, которые позволяют 
	// считать / установить конкретную десятичную цифру из большого числа по переданному индексу слова.В случае передачи некорректного 
	//индекса следует сгенерировать исключение std::logic_error с текстом “Out of range”.
	char operator [] (int _index) const;
	char & operator [] (int _index);

	// Методы char getDigit(int) и setDigit(int, char) доступа и установки значения разряда с конкретным номером в большом числе.
	// В случае передачи некорректного номера разряда следует сгенерировать исключение std::logic_error с текстом “Out of range”.
	char getDigit(int _index) const;
	void setDigit(int _index, char _x);
	
	// Перегруженный оператор преобразования к типу bool, возвращающий false, когда число равно 0 не зависимо от его размера, и true в противном случае.
	explicit operator bool()const { return !(getBigInteger() == "0"); };
	
	// Перегруженный оператор += в двух вариантах - принимающий число типа int в качестве аргумента в первом варианте, другое большое число во втором варианте.
	BigInteger & operator += (int _v);
	BigInteger & operator += (const BigInteger & _v);

	// Аналогичная пара перегруженных операторов + , возвращающих третье число - сумму по аналогии.
	BigInteger operator + (int _v) const;
	BigInteger operator + (BigInteger _v) const;

	// Перегруженный глобальный оператор вывода << числа в поток.Предполагается вывод в десятичной системе счисления.
	// В гобальной области.

	// Перегруженный глобальный оператор ввода >> числа из потока(строка в десятичной системе счисления).
	// В глобальной области.

	// Перегруженный глобальный оператор, принимающий строку в стиле С, позволяющий определить пользовательские литералы типа BigInteger, 
	// имеющие вид 1234567890987654321_big(без кавычек, несмотря на аргумент - строку).
	// В глобальной области.
};

#endif //  _BIGINTEGER_HPP_
